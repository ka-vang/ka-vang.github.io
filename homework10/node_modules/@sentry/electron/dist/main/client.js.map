{"version":3,"file":"client.js","sourceRoot":"","sources":["../../src/main/client.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,uCAAiD;AAGjD,gCAAkC;AAClC,uCAAwC;AACxC,uCAA6C;AAC7C,2CAA6C;AAE7C,uCAAuC;AACvC,2BAA2B;AACd,QAAA,WAAW,GAAW,OAAO,CAAC,oBAAoB,CAAC,CAAC,OAAO,CAAC;AAEzE,8DAA8D;AAC9D,MAAa,UAAW,SAAQ,iBAAwC;IACtE;;;OAGG;IACH,YAAmB,OAAwB;QACzC,KAAK,CAAC,qBAAW,EAAE,OAAO,CAAC,CAAC;IAC9B,CAAC;IAED;;OAEG;IACa,YAAY,CAAC,KAAkB,EAAE,KAAa,EAAE,IAAsB;;;;;YACpF,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,IAAI,MAAM,CAAC;YAC1C,KAAK,CAAC,GAAG,qBACJ,KAAK,CAAC,GAAG,IACZ,IAAI,EAAE,cAAQ,EACd,QAAQ,EAAE;oBACR,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;oBAC5C;wBACE,IAAI,EAAE,sBAAsB;wBAC5B,OAAO,EAAE,mBAAW;qBACrB;iBACF,EACD,OAAO,EAAE,mBAAW,GACrB,CAAC;YAEF,gEAAgE;YAChE,2DAA2D;YAC3D,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YACzD,MAAM,QAAQ,qBAAQ,KAAK,CAAE,CAAC;YAE9B,IAAI,QAAQ,CAAC,WAAW,KAAK,SAAS,IAAI,WAAW,KAAK,SAAS,EAAE;gBACnE,QAAQ,CAAC,WAAW,GAAG,WAAW,CAAC;aACpC;YACD,IAAI,QAAQ,CAAC,OAAO,KAAK,SAAS,IAAI,OAAO,KAAK,SAAS,EAAE;gBAC3D,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;aAC5B;YAED,IAAI,QAAQ,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,SAAS,EAAE;gBACrD,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;aACtB;YAED,OAAO,OAAM,YAAY,YAAC,0BAAc,CAAC,MAAM,0BAAgB,CAAC,QAAQ,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE;QAC3F,CAAC;KAAA;IAED;;;;;;OAMG;IACU,eAAe,CAAC,IAAY,EAAE,QAAqB,EAAE,EAAE,KAAa;;YAC/E,KAAK,CAAC,IAAI,mBAAK,UAAU,EAAE,QAAQ,IAAK,KAAK,CAAC,IAAI,CAAE,CAAC;YACrD,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAM,UAAU,EAAC,EAAE,gDAAC,OAAA,IAAI,CAAC,UAAU,EAAE,CAAC,cAAc,CAAC,IAAI,EAAE,UAAU,CAAC,CAAA,GAAA,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QACpH,CAAC;KAAA;IAED;;OAEG;IACU,YAAY,CAAC,KAAkB,EAAE,IAAsB,EAAE,KAAa;;;;;YACjF,KAAK,CAAC,IAAI,mBAAK,UAAU,EAAE,YAAY,IAAK,KAAK,CAAC,IAAI,CAAE,CAAC;YACzD,OAAO,OAAM,YAAY,YAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE;QAChD,CAAC;KAAA;IAED;;OAEG;IACI,aAAa,CAAC,UAAsB,EAAE,IAA2B,EAAE,KAAa;QACrF,KAAK,CAAC,aAAa,CAAC,UAAU,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IAC/C,CAAC;IAED;;OAEG;IACI,gBAAgB,CAAC,CAAM;QAC5B,OAAO;IACT,CAAC;CACF;AA/ED,gCA+EC","sourcesContent":["import { BaseClient, Scope } from '@sentry/core';\nimport { Breadcrumb, SentryBreadcrumbHint, SentryEvent, SentryEventHint, SentryResponse } from '@sentry/types';\nimport { CommonClient, ElectronOptions } from '../common';\nimport { SDK_NAME } from '../sdk';\nimport { MainBackend } from './backend';\nimport { addEventDefaults } from './context';\nimport { normalizeEvent } from './normalize';\n\n/** SDK version used in every event. */\n// tslint:disable-next-line\nexport const SDK_VERSION: string = require('../../package.json').version;\n\n/** Frontend implementation for Electron renderer backends. */\nexport class MainClient extends BaseClient<MainBackend, ElectronOptions> implements CommonClient {\n  /**\n   * Creates a new Electron SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: ElectronOptions) {\n    super(MainBackend, options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected async prepareEvent(event: SentryEvent, scope?: Scope, hint?: SentryEventHint): Promise<SentryEvent | null> {\n    event.platform = event.platform || 'node';\n    event.sdk = {\n      ...event.sdk,\n      name: SDK_NAME,\n      packages: [\n        ...((event.sdk && event.sdk.packages) || []),\n        {\n          name: 'npm:@sentry/electron',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    // We need to load the options here and set release from options\n    // Otherwise addEventDefaults will add default values there\n    const { environment, release, dist } = this.getOptions();\n    const prepared = { ...event };\n\n    if (prepared.environment === undefined && environment !== undefined) {\n      prepared.environment = environment;\n    }\n    if (prepared.release === undefined && release !== undefined) {\n      prepared.release = release;\n    }\n\n    if (prepared.dist === undefined && dist !== undefined) {\n      prepared.dist = dist;\n    }\n\n    return super.prepareEvent(normalizeEvent(await addEventDefaults(prepared)), scope, hint);\n  }\n\n  /**\n   * Uploads a native crash dump (Minidump) to Sentry.\n   *\n   * @param path The relative or absolute path to the minidump.\n   * @param event Optional event payload to attach to the minidump.\n   * @param scope Optional SDK scope used to upload.\n   */\n  public async captureMinidump(path: string, event: SentryEvent = {}, scope?: Scope): Promise<void> {\n    event.tags = { event_type: 'native', ...event.tags };\n    await this.processEvent(event, async finalEvent => this.getBackend().uploadMinidump(path, finalEvent), {}, scope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async captureEvent(event: SentryEvent, hint?: SentryEventHint, scope?: Scope): Promise<SentryResponse> {\n    event.tags = { event_type: 'javascript', ...event.tags };\n    return super.captureEvent(event, hint, scope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: SentryBreadcrumbHint, scope?: Scope): void {\n    super.addBreadcrumb(breadcrumb, hint, scope);\n  }\n\n  /**\n   * Does nothing in main/node\n   */\n  public showReportDialog(_: any): void {\n    // noop\n  }\n}\n"]}