{"version":3,"file":"context.js","sourceRoot":"","sources":["../../src/main/context.ts"],"names":[],"mappings":"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","sourcesContent":["import * as child from 'child_process';\nimport * as fs from 'fs';\nimport { platform, release } from 'os';\nimport { join } from 'path';\nimport { promisify } from 'util';\n\nimport { SentryEvent } from '@sentry/types';\nimport { app } from 'electron';\n\nconst execFile = promisify(child.execFile);\nconst readdir = promisify(fs.readdir);\nconst readFile = promisify(fs.readFile);\n\n/** Operating system context information. */\ninterface OsContext {\n  /** The name of the operating system. */\n  name?: string;\n  /** The operating system version. */\n  version?: string;\n  /** Operating system specific build identifier */\n  build?: string;\n  /** Version-independent kernel version. */\n  kernel_version?: string;\n}\n\n/** Linux version file to check for a distribution. */\ninterface DistroFile {\n  /** The file name, located in `/etc`. */\n  name: string;\n  /** Potential distributions to check. */\n  distros: string[];\n}\n\n/** Mapping of Node's platform names to actual OS names. */\nconst PLATFORM_NAMES: { [platform: string]: string } = {\n  aix: 'IBM AIX',\n  freebsd: 'FreeBSD',\n  openbsd: 'OpenBSD',\n  sunos: 'SunOS',\n  win32: 'Windows',\n};\n\n/** Mapping of linux release files located in /etc to distributions. */\nconst LINUX_DISTROS: DistroFile[] = [\n  { name: 'fedora-release', distros: ['Fedora'] },\n  { name: 'redhat-release', distros: ['Red Hat Linux', 'Centos'] },\n  { name: 'redhat_version', distros: ['Red Hat Linux'] },\n  { name: 'SuSE-release', distros: ['SUSE Linux'] },\n  { name: 'lsb-release', distros: ['Ubuntu Linux', 'Arch Linux'] },\n  { name: 'debian_version', distros: ['Debian'] },\n  { name: 'debian_release', distros: ['Debian'] },\n  { name: 'arch-release', distros: ['Arch Linux'] },\n  { name: 'gentoo-release', distros: ['Gentoo Linux'] },\n  { name: 'novell-release', distros: ['SUSE Linux'] },\n  { name: 'alpine-release', distros: ['Alpine Linux'] },\n];\n\n/** Functions to extract the OS version from Linux release files. */\nconst LINUX_VERSIONS: {\n  [identifier: string]: (content: string) => string | undefined;\n} = {\n  alpine: content => content,\n  arch: content => matchFirst(/distrib_release=(.*)/, content),\n  centos: content => matchFirst(/release ([^ ]+)/, content),\n  debian: content => content,\n  fedora: content => matchFirst(/release (..)/, content),\n  mint: content => matchFirst(/distrib_release=(.*)/, content),\n  red: content => matchFirst(/release ([^ ]+)/, content),\n  suse: content => matchFirst(/VERSION = (.*)\\n/, content),\n  ubuntu: content => matchFirst(/distrib_release=(.*)/, content),\n};\n\n/** Cached event prototype with default values. */\nlet defaultsPromise: Promise<SentryEvent>;\n\n/**\n * Executes a regular expression with one capture group.\n *\n * @param regex A regular expression to execute.\n * @param text Content to execute the RegEx on.\n * @returns The captured string if matched; otherwise undefined.\n */\nfunction matchFirst(regex: RegExp, text: string): string | undefined {\n  const match = regex.exec(text);\n  return match ? match[1] : undefined;\n}\n\n/** Returns the build type of this app, if possible. */\nfunction getBuildType(): string | undefined {\n  if (process.mas) {\n    return 'app-store';\n  } else if (process.windowsStore) {\n    return 'windows-store';\n  } else {\n    return undefined;\n  }\n}\n\n/** Loads the macOS operating system context. */\nasync function getDarwinInfo(): Promise<OsContext> {\n  // Default values that will be used in case no operating system information\n  // can be loaded. The default version is computed via heuristics from the\n  // kernel version, but the build ID is missing.\n  const darwinInfo: OsContext = {\n    kernel_version: release(),\n    name: 'Mac OS X',\n    version: `10.${Number(release().split('.')[0]) - 4}`,\n  };\n\n  try {\n    // We try to load the actual macOS version by executing the `sw_vers` tool.\n    // This tool should be available on every standard macOS installation. In\n    // case this fails, we stick with the values computed above.\n    const output = (await execFile('/usr/bin/sw_vers')).stdout;\n    darwinInfo.name = matchFirst(/^ProductName:\\s+(.*)$/m, output);\n    darwinInfo.version = matchFirst(/^ProductVersion:\\s+(.*)$/m, output);\n    darwinInfo.build = matchFirst(/^BuildVersion:\\s+(.*)$/m, output);\n  } catch (e) {\n    // ignore\n  }\n\n  return darwinInfo;\n}\n\n/** Returns a distribution identifier to look up version callbacks. */\nfunction getLinuxDistroId(name: string): string {\n  return name.split(' ')[0].toLowerCase();\n}\n\n/** Loads the Linux operating system context. */\nasync function getLinuxInfo(): Promise<OsContext> {\n  // By default, we cannot assume anything about the distribution or Linux\n  // version. `os.release()` returns the kernel version and we assume a generic\n  // \"Linux\" name, which will be replaced down below.\n  const linuxInfo: OsContext = {\n    kernel_version: release(),\n    name: 'Linux',\n  };\n\n  try {\n    // We start guessing the distribution by listing files in the /etc\n    // directory. This is were most Linux distributions (except Knoppix) store\n    // release files with certain distribution-dependent meta data. We search\n    // for exactly one known file defined in `LINUX_DISTROS` and exit if none\n    // are found. In case there are more than one file, we just stick with the\n    // first one.\n    const etcFiles = await readdir('/etc');\n    const distroFile = LINUX_DISTROS.find(file => etcFiles.includes(file.name));\n    if (!distroFile) {\n      return linuxInfo;\n    }\n\n    // Once that file is known, load its contents. To make searching in those\n    // files easier, we lowercase the file contents. Since these files are\n    // usually quite small, this should not allocate too much memory and we only\n    // hold on to it for a very short amount of time.\n    const distroPath = join('/etc', distroFile.name);\n    const contents = (await readFile(distroPath, 'utf-8')).toLowerCase();\n\n    // Some Linux distributions store their release information in the same file\n    // (e.g. RHEL and Centos). In those cases, we scan the file for an\n    // identifier, that basically consists of the first word of the linux\n    // distribution name (e.g. \"red\" for Red Hat). In case there is no match, we\n    // just assume the first distribution in our list.\n    const { distros } = distroFile;\n    linuxInfo.name = distros.find(d => contents.indexOf(getLinuxDistroId(d)) >= 0) || distros[0];\n\n    // Based on the found distribution, we can now compute the actual version\n    // number. This is different for every distribution, so several strategies\n    // are computed in `LINUX_VERSIONS`.\n    const id = getLinuxDistroId(linuxInfo.name);\n    linuxInfo.version = LINUX_VERSIONS[id](contents);\n  } catch (e) {\n    // ignore\n  }\n\n  return linuxInfo;\n}\n\n/**\n * Returns the operating system context.\n *\n * Based on the current platform, this uses a different strategy to provide the\n * most accurate OS information. Since this might involve spawning subprocesses\n * or accessing the file system, this should only be executed lazily and cached.\n *\n *  - On macOS (Darwin), this will execute the `sw_vers` utility. The context\n *    has a `name`, `version`, `build` and `kernel_version` set.\n *  - On Linux, this will try to load a distribution release from `/etc` and set\n *    the `name`, `version` and `kernel_version` fields.\n *  - On all other platforms, only a `name` and `version` will be returned. Note\n *    that `version` might actually be the kernel version.\n */\nasync function getOsContext(): Promise<OsContext> {\n  const platformId = platform();\n  switch (platformId) {\n    case 'darwin':\n      return getDarwinInfo();\n    case 'linux':\n      return getLinuxInfo();\n    default:\n      return {\n        name: PLATFORM_NAMES[platformId] || platformId,\n        version: release(),\n      };\n  }\n}\n\n/**\n * Computes Electron-specific default fields for events.\n *\n * The event defaults include contexts for the Electron, Node and Chrome\n * runtimes, limited device information, operating system context and defaults\n * for the release and environment.\n */\nasync function getEventDefaults(): Promise<SentryEvent> {\n  return {\n    contexts: {\n      app: {\n        app_name: app.getName(),\n        app_version: app.getVersion(),\n        build_type: getBuildType(),\n      },\n      browser: {\n        name: 'Chrome',\n      },\n      chrome: {\n        name: 'Chrome',\n        type: 'runtime',\n        version: process.versions.chrome,\n      },\n      device: {\n        arch: process.arch,\n        family: 'Desktop',\n      },\n      node: {\n        name: 'Node',\n        type: 'runtime',\n        version: process.versions.node,\n      },\n      os: await getOsContext(),\n      runtime: {\n        name: 'Electron',\n        version: process.versions.electron,\n      },\n    },\n    environment: process.defaultApp ? 'development' : 'production',\n    extra: { crashed_process: 'browser' },\n    release: `${app.getName().replace(/\\W/g, '-')}${app.getVersion()}`,\n    user: { ip_address: '{{auto}}' },\n  };\n}\n\n/** Merges the given event payload with SDK defaults. */\nexport async function addEventDefaults(event: SentryEvent): Promise<SentryEvent> {\n  // The event defaults are cached as long as the app is running. We create the\n  // promise here synchronously to avoid multiple events computing them at the\n  // same time.\n  if (!defaultsPromise) {\n    defaultsPromise = getEventDefaults();\n  }\n\n  const { contexts = {} } = event;\n  const { contexts: defaultContexts = {}, ...defaults } = await defaultsPromise;\n\n  // Perform a manual deep merge of the defaults with the event data.\n  // TODO: Use a proper deep merge here, instead.\n  return {\n    ...defaults,\n    ...event,\n    contexts: {\n      ...defaultContexts,\n      ...contexts,\n      app: { ...defaultContexts.app, ...contexts.app },\n      device: { ...defaultContexts.device, ...contexts.device },\n      os: { ...defaultContexts.os, ...contexts.os },\n      runtime: { ...defaultContexts.runtime, ...contexts.runtime },\n    },\n    extra: { ...defaults.extra, ...event.extra },\n    user: { ...defaults.user, ...event.user },\n  };\n}\n"]}