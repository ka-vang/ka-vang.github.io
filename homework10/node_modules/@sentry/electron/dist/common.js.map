{"version":3,"file":"common.js","sourceRoot":"","sources":["../src/common.ts"],"names":[],"mappings":";;AAKA,sEAAsE;AACzD,QAAA,QAAQ,GAAG,sBAAsB,CAAC;AAC/C,qEAAqE;AACxD,QAAA,SAAS,GAAG,uBAAuB,CAAC;AACjD,4CAA4C;AAC/B,QAAA,SAAS,GAAG,6BAA6B,CAAC;AACvD,uCAAuC;AAC1B,QAAA,SAAS,GAAG,uBAAuB,CAAC","sourcesContent":["import { BrowserOptions, ReportDialogOptions } from '@sentry/browser';\nimport { Backend, Client, Options, Scope } from '@sentry/core';\nimport { NodeOptions } from '@sentry/node';\nimport { SentryEvent } from '@sentry/types';\n\n/** IPC to ping the main process when initializing in the renderer. */\nexport const IPC_PING = 'sentry-electron.ping';\n/** IPC to send a captured event (exception or message) to Sentry. */\nexport const IPC_EVENT = 'sentry-electron.event';\n/** IPC to capture a breadcrumb globally. */\nexport const IPC_CRUMB = 'sentry-electron.breadcrumbs';\n/** IPC to capture a scope globally. */\nexport const IPC_SCOPE = 'sentry-electron.scope';\n\n/**\n * Configuration options for {@link SentryElectron}.\n *\n * By default, all native crashes and JavaScript errors will be captured and\n * sent to Sentry. Note that these settings have to be specified during startup\n * and cannot be changed later.\n *\n * This options object can also contain options for the Browser and Node SDKs,\n * which are being used under the hood to record JavaScript errors. Please refer\n * to their documentation for a description of the fields.\n *\n * @see SentryBrowserOptions\n * @see SentryNodeOptions\n * @see SentryElectron\n */\nexport interface ElectronOptions extends Options, BrowserOptions, NodeOptions {\n  /**\n   * Enables crash reporting for JavaScript errors in this process. Defaults to\n   * `true`.\n   */\n  enableJavaScript?: boolean;\n\n  /**\n   * Enables crash reporting for native crashes of this process (via Minidumps).\n   * Defaults to `true`.\n   */\n  enableNative?: boolean;\n\n  /**\n   * Enables event reporting for BrowserWindow 'unresponsive' events\n   * Defaults to `true`.\n   */\n  enableUnresponsive?: boolean;\n\n  /**\n   * Callback to allow custom naming of renderer processes\n   * If the callback is not set, or it returns `undefined`, the default naming\n   * scheme is used.\n   */\n  getRendererName?(contents: Electron.WebContents): string | undefined;\n}\n\n/** Common interface for Electron clients. */\nexport interface CommonClient extends Client<ElectronOptions> {\n  /**\n   * Uploads a native crash dump (Minidump) to Sentry.\n   *\n   * @param path The relative or absolute path to the minidump.\n   * @param event Optional event payload to attach to the minidump.\n   * @param scope The SDK scope used to upload.\n   */\n  captureMinidump(path: string, event: SentryEvent, scope: Scope): Promise<void>;\n\n  /**\n   * @inheritdoc {@link BrowserClient.showReportDialog}\n   */\n  showReportDialog(options: ReportDialogOptions): void;\n}\n\n/** Common interface for Electron backends. */\nexport { Backend as CommonBackend };\n"]}