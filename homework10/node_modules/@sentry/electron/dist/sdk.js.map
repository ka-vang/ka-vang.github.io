{"version":3,"file":"sdk.js","sourceRoot":"","sources":["../src/sdk.ts"],"names":[],"mappings":";;AAAa,QAAA,QAAQ,GAAG,4BAA4B,CAAC;AAIrD,uCAA6C;AAC7C,6CAAgD;AAGhD,yCAA0D;AAE1D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CG;AACH,SAAgB,IAAI,CAAC,OAAwB;IAC3C,uBAAY,CAAC,OAAO,CAAC,CAAC;AACxB,CAAC;AAFD,oBAEC;AAED;;;;GAIG;AACH,SAAgB,gBAAgB,CAAC,UAA+B,EAAE;IAC/D,oBAAa,EAAE,CAAC,SAAS,EAAqB,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;AAC5E,CAAC;AAFD,4CAEC;AAED;;;;;GAKG;AACH,SAAgB,eAAe,CAAC,IAAY,EAAE,QAAqB,EAAE;IACnE,uBAAa,CAAC,iBAAiB,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;AAChD,CAAC;AAFD,0CAEC","sourcesContent":["export const SDK_NAME = 'sentry.javascript.electron';\n// Version will be taken directly from package.json in sdkinformation.ts integration\n\nimport { ReportDialogOptions } from '@sentry/browser';\nimport { getCurrentHub } from '@sentry/core';\nimport { _callOnClient } from '@sentry/minimal';\nimport { SentryEvent } from '@sentry/types';\nimport { ElectronOptions } from './common';\nimport { ElectronClient, specificInit } from './dispatch';\n\n/**\n * The Sentry Electron SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible in the\n * entry modules. This applies to the main process as well as all renderer\n * processes or further sub processes you spawn. To set context information or\n * send manual events, use the provided methods.\n *\n * @example\n * const { init } = require('@sentry/electron');\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n *\n * @example\n * import { configureScope } from '@sentry/electron';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTags({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n *\n * @example\n * import { addBreadcrumb } from '@sentry/electron';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n *\n * @example\n * import * as Sentry from '@sentry/electron';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n *\n * @see ElectronOptions for documentation on configuration options.\n */\nexport function init(options: ElectronOptions): void {\n  specificInit(options);\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}): void {\n  (getCurrentHub().getClient() as ElectronClient).showReportDialog(options);\n}\n\n/**\n * Uploads a native crash dump (Minidump) to Sentry.\n *\n * @param path The relative or absolute path to the minidump.\n * @param event Optional event payload to attach to the minidump.\n */\nexport function captureMinidump(path: string, event: SentryEvent = {}): void {\n  _callOnClient('captureMinidump', path, event);\n}\n"]}