{"version":3,"file":"client.js","sourceRoot":"","sources":["../../src/renderer/client.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6CAAqE;AACrE,uCAAgE;AAEhE,uCAAuC;AACvC,sCAAqE;AACrE,uCAA4C;AAE5C,8DAA8D;AAC9D,MAAa,cAAe,SAAQ,iBAA4C;IAM9E;;;OAGG;IACH,YAAmB,OAAwB;QACzC,KAAK,CAAC,yBAAe,EAAE,OAAO,CAAC,CAAC;QAChC,IAAI,CAAC,KAAK,GAAG,IAAI,uBAAa,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAC;IAED;;OAEG;IACa,YAAY,CAAC,KAAkB,EAAE,KAAa,EAAE,IAAsB;;;;;YACpF,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,IAAI,YAAY,CAAC;YAChD,OAAO,OAAM,YAAY,YAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE;QAChD,CAAC;KAAA;IAED;;;;;;OAMG;IACU,eAAe,CAAC,KAAa,EAAE,MAAmB,EAAE,MAAc;;YAC7E,OAAO;QACT,CAAC;KAAA;IAED;;OAEG;IACU,aAAa,CAAC,UAAsB,EAAE,KAA4B,EAAE,MAAc;;YAC7F,sBAAW,CAAC,IAAI,CAAC,kBAAS,EAAE,UAAU,CAAC,CAAC;QAC1C,CAAC;KAAA;IAED;;;OAGG;IACI,gBAAgB,CAAC,UAA+B,EAAE;QACvD,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YACpB,OAAO,CAAC,OAAO,GAAG,oBAAa,EAAE,CAAC,WAAW,EAAE,CAAC;SACjD;QACD,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;CACF;AAnDD,wCAmDC","sourcesContent":["import { BrowserClient, ReportDialogOptions } from '@sentry/browser';\nimport { BaseClient, getCurrentHub, Scope } from '@sentry/core';\nimport { Breadcrumb, SentryBreadcrumbHint, SentryEvent, SentryEventHint } from '@sentry/types';\nimport { ipcRenderer } from 'electron';\nimport { CommonClient, ElectronOptions, IPC_CRUMB } from '../common';\nimport { RendererBackend } from './backend';\n\n/** Frontend implementation for Electron renderer backends. */\nexport class RendererClient extends BaseClient<RendererBackend, ElectronOptions> implements CommonClient {\n  /**\n   * Internal used browser client\n   */\n  private readonly inner: BrowserClient;\n\n  /**\n   * Creates a new Electron SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: ElectronOptions) {\n    super(RendererBackend, options);\n    this.inner = new BrowserClient(options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected async prepareEvent(event: SentryEvent, scope?: Scope, hint?: SentryEventHint): Promise<SentryEvent | null> {\n    event.platform = event.platform || 'javascript';\n    return super.prepareEvent(event, scope, hint);\n  }\n\n  /**\n   * Uploads a native crash dump (Minidump) to Sentry.\n   *\n   * @param path The relative or absolute path to the minidump.\n   * @param event Optional event payload to attach to the minidump.\n   * @param scope The SDK scope used to upload.\n   */\n  public async captureMinidump(_path: string, _event: SentryEvent, _scope?: Scope): Promise<void> {\n    // Noop\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async addBreadcrumb(breadcrumb: Breadcrumb, _hint?: SentryBreadcrumbHint, _scope?: Scope): Promise<void> {\n    ipcRenderer.send(IPC_CRUMB, breadcrumb);\n  }\n\n  /**\n   * Basically calling {@link BrowserClient.showReportDialog}\n   * @inheritdoc\n   */\n  public showReportDialog(options: ReportDialogOptions = {}): void {\n    if (!options.eventId) {\n      options.eventId = getCurrentHub().lastEventId();\n    }\n    this.inner.showReportDialog(options);\n  }\n}\n"]}