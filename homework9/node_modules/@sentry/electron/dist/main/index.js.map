{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/main/index.ts"],"names":[],"mappings":";;AAAA,2BAA2B;AAC3B,OAAO,CAAC,qBAAqB,CAAC,EAAE,CAAC;AACjC,uCAA2C;AAC3C,uCAAmD;AAEnD,qCAAsC;AACtC,iDAA+D;AAC/D,0CAAgD;AAChD,mCAAsC;AAA7B,8BAAA,UAAU,CAAA;AACnB,qCAAwC;AAA/B,gCAAA,WAAW,CAAA;AACpB,qCAAgE;AAAvD,kCAAA,YAAY,CAAoB;AAEzC,yCAAyC;AAC5B,QAAA,oBAAoB,GAAG,EAAE,QAAQ,EAAR,uBAAQ,EAAE,mBAAmB,EAAnB,kCAAmB,EAAE,CAAC;AAEtE;;;GAGG;AACH,SAAgB,IAAI,CAAC,OAAwB;IAC3C,MAAM,oBAAoB,GAAG,0BAAmB,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,KAAK,qBAAqB,CAAC,CAAC;IACnH,IAAI,OAAO,CAAC,mBAAmB,KAAK,SAAS,EAAE;QAC7C,OAAO,CAAC,mBAAmB,GAAG;YAC5B,GAAG,oBAAoB;YACvB,6CAA6C;YAC7C,IAAI,kCAAmB,CAAC,EAAE,YAAY,EAAE,OAAO,CAAC,YAAY,EAAE,CAAC;YAC/D,IAAI,uBAAQ,EAAE;SACf,CAAC;KACH;IACD,kBAAW,CAAC,mBAAU,kBACpB,SAAS,EAAE,kBAAY,IACpB,OAAO,EACV,CAAC;AACL,CAAC;AAdD,oBAcC","sourcesContent":["// tslint:disable-next-line\nrequire('util.promisify/shim')();\nimport { initAndBind } from '@sentry/core';\nimport { defaultIntegrations } from '@sentry/node';\nimport { ElectronOptions } from '..';\nimport { MainClient } from './client';\nimport { Electron, OnUncaughtException } from './integrations';\nimport { NetTransport } from './transports/net';\nexport { MainClient } from './client';\nexport { MainBackend } from './backend';\nexport { Integrations as NodeIntegrations } from '@sentry/node';\n\n// tslint:disable-next-line:variable-name\nexport const ElectronIntegrations = { Electron, OnUncaughtException };\n\n/**\n * Init call to node, if no transport is set, we use net of electron\n * @param options ElectronOptions\n */\nexport function init(options: ElectronOptions): void {\n  const electronIntegrations = defaultIntegrations.filter(integration => integration.name !== 'OnUncaughtException');\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = [\n      ...electronIntegrations,\n      // tslint:disable-next-line:no-unbound-method\n      new OnUncaughtException({ onFatalError: options.onFatalError }),\n      new Electron(),\n    ];\n  }\n  initAndBind(MainClient, {\n    transport: NetTransport,\n    ...options,\n  });\n}\n"]}