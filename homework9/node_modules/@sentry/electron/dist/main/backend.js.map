{"version":3,"file":"backend.js","sourceRoot":"","sources":["../../src/main/backend.ts"],"names":[],"mappings":"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","sourcesContent":["import { app, crashReporter, ipcMain } from 'electron';\nimport { join } from 'path';\n\nimport { Breadcrumb, SentryEvent, SentryResponse, Severity, Status } from '@sentry/types';\n\nimport {\n  addBreadcrumb,\n  BaseBackend,\n  captureEvent,\n  captureMessage,\n  configureScope,\n  Dsn,\n  Scope,\n  SentryError,\n} from '@sentry/core';\nimport { getCurrentHub, NodeBackend } from '@sentry/node';\nimport { forget } from '@sentry/utils/async';\nimport { Store } from '@sentry/utils/store';\n\nimport { CommonBackend, ElectronOptions, IPC_CRUMB, IPC_EVENT, IPC_PING, IPC_SCOPE } from '../common';\nimport { captureMinidump } from '../sdk';\nimport { normalizeUrl } from './normalize';\nimport { MinidumpUploader } from './uploader';\n\n/** Patch to access internal CrashReporter functionality. */\ninterface CrashReporterExt {\n  getCrashesDirectory(): string;\n}\n\n/** Gets the path to the Sentry cache directory. */\nfunction getCachePath(): string {\n  return join(app.getPath('userData'), 'sentry');\n}\n\n/**\n * Retruns a promise that resolves when app is ready.\n */\nexport async function isAppReady(): Promise<boolean> {\n  return (\n    app.isReady() ||\n    new Promise<boolean>(resolve => {\n      app.once('ready', resolve);\n    })\n  );\n}\n\n/** Backend implementation for Electron renderer backends. */\nexport class MainBackend extends BaseBackend<ElectronOptions> implements CommonBackend {\n  /** The inner SDK used to record Node events. */\n  private readonly inner: NodeBackend;\n\n  /** Store to persist context information beyond application crashes. */\n  private readonly scopeStore: Store<Scope>;\n\n  /** Uploader for minidump files. */\n  private uploader?: MinidumpUploader;\n\n  /** Creates a new Electron backend instance. */\n  public constructor(options: ElectronOptions) {\n    super(options);\n    this.inner = new NodeBackend(options);\n    this.scopeStore = new Store<Scope>(getCachePath(), 'scope', new Scope());\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public install(): boolean {\n    let success = true;\n\n    // We refill the scope here to not have an empty one\n    configureScope(scope => {\n      // tslint:disable:no-unsafe-any\n      const loadedScope = Scope.clone(this.scopeStore.get()) as any;\n\n      if (loadedScope.user) {\n        scope.setUser(loadedScope.user);\n      }\n      if (loadedScope.tags) {\n        Object.keys(loadedScope.tags).forEach(key => {\n          scope.setTag(key, loadedScope.tags[key]);\n        });\n      }\n      if (loadedScope.extra) {\n        Object.keys(loadedScope.extra).forEach(key => {\n          scope.setExtra(key, loadedScope.extra[key]);\n        });\n      }\n      if (loadedScope.breadcrumbs) {\n        loadedScope.breadcrumbs.forEach((crumb: any) => {\n          scope.addBreadcrumb(crumb);\n        });\n      }\n      // tslint:enable:no-unsafe-any\n    });\n\n    if (this.isNativeEnabled()) {\n      success = this.installNativeHandler() && success;\n    }\n\n    this.installIPC();\n\n    return success;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async eventFromException(exception: any): Promise<SentryEvent> {\n    return this.inner.eventFromException(exception);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async eventFromMessage(message: string): Promise<SentryEvent> {\n    return this.inner.eventFromMessage(message);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async sendEvent(event: SentryEvent): Promise<SentryResponse> {\n    await isAppReady();\n    return this.inner.sendEvent(event);\n  }\n\n  /**\n   * Uploads the given minidump and attaches event information.\n   *\n   * @param path A relative or absolute path to the minidump file.\n   * @param event Optional event information to add to the minidump request.\n   * @returns A promise that resolves to the status code of the request.\n   */\n  public async uploadMinidump(path: string, event: SentryEvent = {}): Promise<SentryResponse> {\n    if (this.uploader) {\n      return this.uploader.uploadMinidump({ path, event });\n    }\n    return { status: Status.Success };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public storeScope(scope: Scope): void {\n    const cloned = Scope.clone(scope);\n    (cloned as any).eventProcessors = [];\n    // tslint:disable-next-line:no-object-literal-type-assertion\n    this.scopeStore.update((current: Scope) => ({ ...current, ...cloned } as Scope));\n  }\n\n  /** Returns whether native reports are enabled. */\n  private isNativeEnabled(): boolean {\n    // Mac AppStore builds cannot run the crash reporter due to the sandboxing\n    // requirements. In this case, we prevent enabling native crashes entirely.\n    // https://electronjs.org/docs/tutorial/mac-app-store-submission-guide#limitations-of-mas-build\n    if (process.mas) {\n      return false;\n    }\n\n    return this.options.enableNative !== false;\n  }\n\n  /** Activates the Electron CrashReporter. */\n  private installNativeHandler(): boolean {\n    // We are only called by the frontend if the SDK is enabled and a valid DSN\n    // has been configured. If no DSN is present, this indicates a programming\n    // error.\n    const dsnString = this.options.dsn;\n    if (!dsnString) {\n      throw new SentryError('Invariant exception: install() must not be called when disabled');\n    }\n\n    const dsn = new Dsn(dsnString);\n\n    // We will manually submit errors, but CrashReporter requires a submitURL in\n    // some versions. Also, provide a productName and companyName, which we will\n    // add manually to the event's context during submission.\n    crashReporter.start({\n      companyName: '',\n      ignoreSystemCrashHandler: true,\n      productName: app.getName(),\n      submitURL: MinidumpUploader.minidumpUrlFromDsn(dsn),\n      uploadToServer: false,\n    });\n\n    // The crashReporter has an undocumented method to retrieve the directory\n    // it uses to store minidumps in. The structure in this directory depends\n    // on the crash library being used (Crashpad or Breakpad).\n    const reporter: CrashReporterExt = crashReporter as any;\n    const crashesDirectory = reporter.getCrashesDirectory();\n\n    this.uploader = new MinidumpUploader(dsn, crashesDirectory, getCachePath());\n\n    // Flush already cached minidumps from the queue.\n    forget(this.uploader.flushQueue());\n\n    // Start to submit recent minidump crashes. This will load breadcrumbs and\n    // context information that was cached on disk prior to the crash.\n    forget(this.sendNativeCrashes({}));\n\n    // Every time a subprocess or renderer crashes, start sending minidumps\n    // right away.\n    app.on('web-contents-created', (_, contents) => {\n      contents.on('crashed', async () => {\n        try {\n          await this.sendNativeCrashes(this.getRendererExtra(contents));\n        } catch (e) {\n          console.error(e);\n        }\n\n        addBreadcrumb({\n          category: 'exception',\n          level: Severity.Critical,\n          message: 'Renderer Crashed',\n          timestamp: new Date().getTime() / 1000,\n        });\n      });\n\n      if (this.options.enableUnresponsive !== false) {\n        contents.on('unresponsive', () => {\n          captureMessage('BrowserWindow Unresponsive');\n        });\n      }\n    });\n\n    return true;\n  }\n\n  /** Installs IPC handlers to receive events and metadata from renderers. */\n  private installIPC(): void {\n    ipcMain.on(IPC_PING, (event: Electron.Event) => {\n      event.sender.send(IPC_PING);\n    });\n\n    ipcMain.on(IPC_CRUMB, (_: any, crumb: Breadcrumb) => {\n      addBreadcrumb(crumb);\n    });\n\n    ipcMain.on(IPC_EVENT, (ipc: Electron.Event, event: SentryEvent) => {\n      event.extra = {\n        ...this.getRendererExtra(ipc.sender),\n        ...event.extra,\n      };\n      captureEvent(event);\n    });\n\n    ipcMain.on(IPC_SCOPE, (_: any, rendererScope: Scope) => {\n      // tslint:disable:no-unsafe-any\n      const sentScope = Scope.clone(rendererScope) as any;\n      configureScope(scope => {\n        if (sentScope.user) {\n          scope.setUser(sentScope.user);\n        }\n        if (sentScope.tags) {\n          Object.keys(sentScope.tags).forEach(key => {\n            scope.setTag(key, sentScope.tags[key]);\n          });\n        }\n        if (sentScope.extra) {\n          Object.keys(sentScope.extra).forEach(key => {\n            scope.setExtra(key, sentScope.extra[key]);\n          });\n        }\n      });\n      // tslint:enable:no-unsafe-any\n    });\n  }\n\n  /** Loads new native crashes from disk and sends them to Sentry. */\n  private async sendNativeCrashes(extra: object): Promise<void> {\n    // Whenever we are called, assume that the crashes we are going to load down\n    // below have occurred recently. This means, we can use the same event data\n    // for all minidumps that we load now. There are two conditions:\n    //\n    //  1. The application crashed and we are just starting up. The stored\n    //     breadcrumbs and context reflect the state during the application\n    //     crash.\n    //\n    //  2. A renderer process crashed recently and we have just been notified\n    //     about it. Just use the breadcrumbs and context information we have\n    //     right now and hope that the delay was not too long.\n\n    const uploader = this.uploader;\n    if (uploader === undefined) {\n      throw new SentryError('Invariant violation: Native crashes not enabled');\n    }\n\n    const currentCloned = Scope.clone(getCurrentHub().getScope());\n    const fetchedScope = this.scopeStore.get();\n    const storedScope = Scope.clone(fetchedScope);\n    let event: SentryEvent | null = { extra };\n    event = await storedScope.applyToEvent(event);\n    event = event && (await currentCloned.applyToEvent(event));\n    const paths = await uploader.getNewMinidumps();\n    paths.map(path => {\n      captureMinidump(path, { ...event });\n    });\n  }\n\n  /** Returns extra information from a renderer's web contents. */\n  private getRendererExtra(contents: Electron.WebContents): { [key: string]: any } {\n    const customName = this.options.getRendererName && this.options.getRendererName(contents);\n\n    return {\n      crashed_process: customName || `renderer[${contents.id}]`,\n      crashed_url: normalizeUrl(contents.getURL()),\n    };\n  }\n}\n"]}