{"version":3,"file":"electron.js","sourceRoot":"","sources":["../../../src/main/integrations/electron.ts"],"names":[],"mappings":";;AAAA,uCAA6C;AAE7C,uCAKkB;AAGlB,qDAAqD;AACrD,MAAa,QAAQ;IAArB;QACE;;WAEG;QACI,SAAI,GAAW,QAAQ,CAAC,EAAE,CAAC;IA4DpC,CAAC;IArDC;;OAEG;IACI,SAAS;QACd,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,cAAG,CAAC,CAAC;QAEvC,cAAG,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE;YACrB,sCAAsC;YACtC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE,iBAAM,CAAC,CAAC;YAC7C,IAAI,CAAC,qBAAqB,CAAC,cAAc,EAAE,uBAAY,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,cAAG,CAAC,EAAE,CAAC,sBAAsB,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE;YAC7C,yDAAyD;YACzD,oDAAoD;YACpD,YAAY,CAAC,GAAG,EAAE;gBAChB,MAAM,OAAO,GAAI,oBAAa,EAAE,CAAC,SAAS,EAAqB,CAAC,UAAU,EAAE,CAAC;gBAC7E,MAAM,UAAU,GAAG,OAAO,CAAC,eAAe,IAAI,OAAO,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;gBAEhF,IAAI,CAAC,qBAAqB,CAAC,UAAU,IAAI,eAAe,QAAQ,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE;oBAChF,WAAW;oBACX,UAAU;oBACV,WAAW;iBACZ,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACK,qBAAqB,CAAC,QAAgB,EAAE,OAA8B,EAAE,SAAmB,EAAE;QAEnG,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAS,CAAC;QAEhD,OAAO,CAAC,IAAI,GAAG,CAAC,KAAK,EAAE,GAAG,IAAI,EAAE,EAAE;YAChC,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE;gBACrD,MAAM,UAAU,GAAG;oBACjB,QAAQ,EAAE,UAAU;oBACpB,OAAO,EAAE,GAAG,QAAQ,IAAI,KAAK,EAAE;oBAC/B,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,IAAI;oBACtC,IAAI,EAAE,IAAI;iBACX,CAAC;gBACF,MAAM,IAAI,GAAG,oBAAa,EAAE,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;gBACtD,IAAI,IAAI,EAAE;oBACR,oBAAa,EAAE,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;iBAC3C;aACF;YAED,OAAO,IAAI,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC;QAC9B,CAAC,CAAC;IACJ,CAAC;;AAzDD;;GAEG;AACW,WAAE,GAAW,UAAU,CAAC;AATxC,4BAgEC","sourcesContent":["import { getCurrentHub } from '@sentry/node';\nimport { Integration } from '@sentry/types';\nimport {\n  app,\n  powerMonitor,\n  screen,\n  // tslint:disable-next-line:no-implicit-dependencies\n} from 'electron';\nimport { ElectronClient } from '../../dispatch';\n\n/** Electron integration that cleans up the event. */\nexport class Electron implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = Electron.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Electron';\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    this.instrumentBreadcrumbs('app', app);\n\n    app.once('ready', () => {\n      // We can't access these until 'ready'\n      this.instrumentBreadcrumbs('Screen', screen);\n      this.instrumentBreadcrumbs('PowerMonitor', powerMonitor);\n    });\n\n    app.on('web-contents-created', (_, contents) => {\n      // SetImmediate is required for contents.id to be correct\n      // https://github.com/electron/electron/issues/12036\n      setImmediate(() => {\n        const options = (getCurrentHub().getClient() as ElectronClient).getOptions();\n        const customName = options.getRendererName && options.getRendererName(contents);\n\n        this.instrumentBreadcrumbs(customName || `WebContents[${contents.id}]`, contents, [\n          'dom-ready',\n          'load-url',\n          'destroyed',\n        ]);\n      });\n    });\n  }\n\n  /**\n   * Hooks into the Electron EventEmitter to capture breadcrumbs for the\n   * specified events.\n   */\n  private instrumentBreadcrumbs(category: string, emitter: Electron.EventEmitter, events: string[] = []): void {\n    type Emit = (event: string, ...args: any[]) => boolean;\n    const emit = emitter.emit.bind(emitter) as Emit;\n\n    emitter.emit = (event, ...args) => {\n      if (events.length === 0 || events.indexOf(event) > -1) {\n        const breadcrumb = {\n          category: 'electron',\n          message: `${category}.${event}`,\n          timestamp: new Date().getTime() / 1000,\n          type: 'ui',\n        };\n        const self = getCurrentHub().getIntegration(Electron);\n        if (self) {\n          getCurrentHub().addBreadcrumb(breadcrumb);\n        }\n      }\n\n      return emit(event, ...args);\n    };\n  }\n}\n"]}